import {
  __commonJS
} from "./chunk-566ZMKWB.js";

// node_modules/@luigi-project/client/luigi-client.js
var require_luigi_client = __commonJS({
  "node_modules/@luigi-project/client/luigi-client.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.LuigiClient = t() : e.LuigiClient = t();
    }(window, function() {
      return function(e) {
        var t = {};
        function n(i) {
          if (t[i])
            return t[i].exports;
          var r = t[i] = { i, l: false, exports: {} };
          return e[i].call(r.exports, r, r.exports, n), r.l = true, r.exports;
        }
        return n.m = e, n.c = t, n.d = function(e2, t2, i) {
          n.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: i });
        }, n.r = function(e2) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
        }, n.t = function(e2, t2) {
          if (1 & t2 && (e2 = n(e2)), 8 & t2)
            return e2;
          if (4 & t2 && "object" == typeof e2 && e2 && e2.__esModule)
            return e2;
          var i = /* @__PURE__ */ Object.create(null);
          if (n.r(i), Object.defineProperty(i, "default", { enumerable: true, value: e2 }), 2 & t2 && "string" != typeof e2)
            for (var r in e2)
              n.d(i, r, function(t3) {
                return e2[t3];
              }.bind(null, r));
          return i;
        }, n.n = function(e2) {
          var t2 = e2 && e2.__esModule ? function() {
            return e2.default;
          } : function() {
            return e2;
          };
          return n.d(t2, "a", t2), t2;
        }, n.o = function(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }, n.p = "", n(n.s = 13);
      }([function(e, t) {
        e.exports = function(e2, t2) {
          if (!(e2 instanceof t2))
            throw new TypeError("Cannot call a class as a function");
        };
      }, function(e, t) {
        function n(e2, t2) {
          for (var n2 = 0; n2 < t2.length; n2++) {
            var i = t2[n2];
            i.enumerable = i.enumerable || false, i.configurable = true, "value" in i && (i.writable = true), Object.defineProperty(e2, i.key, i);
          }
        }
        e.exports = function(e2, t2, i) {
          return t2 && n(e2.prototype, t2), i && n(e2, i), e2;
        };
      }, function(e, t, n) {
        var i = n(7), r = n(5);
        e.exports = function(e2, t2) {
          return !t2 || "object" !== i(t2) && "function" != typeof t2 ? r(e2) : t2;
        };
      }, function(e, t) {
        function n(t2) {
          return e.exports = n = Object.setPrototypeOf ? Object.getPrototypeOf : function(e2) {
            return e2.__proto__ || Object.getPrototypeOf(e2);
          }, n(t2);
        }
        e.exports = n;
      }, function(e, t, n) {
        var i = n(8);
        e.exports = function(e2, t2) {
          if ("function" != typeof t2 && null !== t2)
            throw new TypeError("Super expression must either be null or a function");
          e2.prototype = Object.create(t2 && t2.prototype, { constructor: { value: e2, writable: true, configurable: true } }), t2 && i(e2, t2);
        };
      }, function(e, t) {
        e.exports = function(e2) {
          if (void 0 === e2)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return e2;
        };
      }, function(e, t, n) {
        var i = n(10), r = n(11), o = n(12);
        e.exports = function(e2, t2) {
          return i(e2) || r(e2, t2) || o();
        };
      }, function(e, t) {
        function n(t2) {
          return "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? e.exports = n = function(e2) {
            return typeof e2;
          } : e.exports = n = function(e2) {
            return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
          }, n(t2);
        }
        e.exports = n;
      }, function(e, t) {
        function n(t2, i) {
          return e.exports = n = Object.setPrototypeOf || function(e2, t3) {
            return e2.__proto__ = t3, e2;
          }, n(t2, i);
        }
        e.exports = n;
      }, function(e) {
        e.exports = JSON.parse('{"name":"@luigi-project/client","description":"Javascript library supporting consumers of the Luigi framework","license":"Apache-2.0","main":"luigi-client.js","repository":{"type":"git","url":"ssh://github.com/SAP/luigi.git"},"publishConfig":{"tag":"luigi-client"},"keywords":["luigi","UI","extensibility","micro-frontends","microfrontends"],"version":"1.26.0"}');
      }, function(e, t) {
        e.exports = function(e2) {
          if (Array.isArray(e2))
            return e2;
        };
      }, function(e, t) {
        e.exports = function(e2, t2) {
          if (Symbol.iterator in Object(e2) || "[object Arguments]" === Object.prototype.toString.call(e2)) {
            var n = [], i = true, r = false, o = void 0;
            try {
              for (var a, s = e2[Symbol.iterator](); !(i = (a = s.next()).done) && (n.push(a.value), !t2 || n.length !== t2); i = true)
                ;
            } catch (e3) {
              r = true, o = e3;
            } finally {
              try {
                i || null == s.return || s.return();
              } finally {
                if (r)
                  throw o;
              }
            }
            return n;
          }
        };
      }, function(e, t) {
        e.exports = function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        };
      }, function(e, t, n) {
        "use strict";
        n.r(t);
        var i = n(0), r = n.n(i), o = n(1), a = n.n(o), s = n(2), u = n.n(s), l = n(3), c = n.n(l), d = n(4), v = n.n(d), g = function() {
          function e2() {
            r()(this, e2), this.promises = {};
          }
          return a()(e2, [{ key: "setPromise", value: function(e3, t2) {
            this.promises[e3] = t2;
          } }, { key: "getPromise", value: function(e3) {
            return this.promises[e3];
          } }]), e2;
        }(), f = new (function() {
          function e2() {
            r()(this, e2), this.listeners = [], this.origin = "";
            var t2 = function(e3) {
              if (e3.data.msg)
                if ("custom" === e3.data.msg) {
                  var t3 = this.convertCustomMessageInternalToUser(e3.data);
                  this.listeners.filter(function(e4) {
                    return e4.name === t3.id;
                  }).map(function(e4) {
                    return e4.eventFn(t3, e4.listenerId);
                  });
                } else
                  this.listeners.filter(function(t4) {
                    return t4.name === e3.data.msg;
                  }).map(function(t4) {
                    return t4.eventFn(e3, t4.listenerId);
                  });
            }.bind(this);
            window.addEventListener("message", t2);
          }
          return a()(e2, [{ key: "convertCustomMessageInternalToUser", value: function(e3) {
            return e3.data;
          } }, { key: "convertCustomMessageUserToInternal", value: function(e3) {
            return { msg: "custom", data: e3 };
          } }, { key: "convertStorageMessageToInternal", value: function(e3) {
            return { msg: "storage", data: e3 };
          } }, { key: "addEventListener", value: function(e3, t2) {
            var n2 = this.getRandomId();
            return this.listeners.push({ name: e3, eventFn: t2, listenerId: n2 }), n2;
          } }, { key: "removeEventListener", value: function(e3) {
            return !!Boolean(this.listeners.find(function(t2) {
              return t2.listenerId === e3;
            })) && (this.listeners = this.listeners.filter(function(t2) {
              return t2.listenerId !== e3;
            }), true);
          } }, { key: "getRandomId", value: function() {
            return (window.crypto || window.msCrypto).getRandomValues(new Uint32Array(1))[0];
          } }, { key: "isFunction", value: function(e3) {
            return "function" == typeof e3;
          } }, { key: "isObject", value: function(e3) {
            return "[object Object]" === Object.prototype.toString.call(e3);
          } }, { key: "getLuigiCoreDomain", value: function() {
            return this.origin;
          } }, { key: "setLuigiCoreDomain", value: function(e3) {
            e3 && "null" !== e3 && (this.origin = e3);
          } }, { key: "setTargetOrigin", value: function(e3) {
            this.setLuigiCoreDomain(e3);
          } }, { key: "sendPostMessageToLuigiCore", value: function(e3) {
            if (this.origin)
              try {
                window.parent.postMessage(e3, this.origin);
              } catch (t2) {
                console.warn("Unable to post message " + e3 + " to Luigi Core from origin " + this.origin + ": " + t2);
              }
            else
              console.warn('There is no target origin set. You can specify the target origin by calling LuigiClient.setTargetOrigin("targetorigin") in your micro frontend.');
          } }, { key: "hasIntent", value: function(e3) {
            return !!e3 && e3.toLowerCase().includes("#?intent=");
          } }, { key: "deSanitizeParamsMap", value: function(e3) {
            var t2 = this;
            return Object.entries(e3).reduce(function(e4, n2) {
              return e4[t2.deSanitizeParam(n2[0])] = t2.deSanitizeParam(n2[1]), e4;
            }, {});
          } }, { key: "deSanitizeParam", value: function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
            return String(e3).replaceAll("&lt;", "<").replaceAll("&gt;", ">").replaceAll("&quot;", '"').replaceAll("&#39;", "'").replaceAll("&sol;", "/");
          } }]), e2;
        }())(), h = new (function(e2) {
          function t2() {
            var e3;
            return r()(this, t2), (e3 = u()(this, c()(t2).call(this))).luigiInitialized = false, e3.defaultContextKeys = ["context", "internal", "nodeParams", "pathParams", "searchParams"], e3.setCurrentContext(e3.defaultContextKeys.reduce(function(e4, t3) {
              return e4[t3] = {}, e4;
            }, {})), e3._onContextUpdatedFns = {}, e3._onInactiveFns = {}, e3._onInitFns = {}, e3.authData = {}, e3._isDeferInitDefined() || e3.luigiClientInit(), e3;
          }
          return v()(t2, e2), a()(t2, [{ key: "_isDeferInitDefined", value: function() {
            return window.document.head.hasAttribute("defer-luigi-init");
          } }, { key: "isLuigiClientInitialized", value: function() {
            return this.luigiInitialized;
          } }, { key: "luigiClientInit", value: function() {
            var e3 = this;
            if (this.luigiInitialized)
              console.warn("Luigi Client has been already initialized");
            else {
              var t3 = function(t4) {
                for (var n2 = 0; n2 < e3.defaultContextKeys.length; n2++) {
                  var i3 = e3.defaultContextKeys[n2];
                  try {
                    "string" == typeof t4[i3] && (t4[i3] = JSON.parse(t4[i3]));
                  } catch (e4) {
                    console.info("unable to parse luigi context data for", i3, t4[i3], e4);
                  }
                }
                e3.setCurrentContext(t4);
              }, i2 = function(t4) {
                t4 && (e3.authData = t4);
              };
              f.addEventListener("luigi.init", function(n2) {
                t3(n2.data), i2(n2.data.authData), f.setLuigiCoreDomain(n2.origin), e3.luigiInitialized = true, e3._notifyInit(n2.origin), f.sendPostMessageToLuigiCore({ msg: "luigi.init.ok" });
              }), f.addEventListener("luigi-client.inactive-microfrontend", function(t4) {
                e3._notifyInactive(t4.origin);
              }), f.addEventListener("luigi.auth.tokenIssued", function(e4) {
                i2(e4.data.authData);
              }), f.addEventListener("luigi.navigate", function(n2) {
                if (t3(n2.data), !e3.currentContext.internal.isNavigateBack && !e3.currentContext.withoutSync) {
                  var i3 = window.location.hash;
                  history.replaceState({ luigiInduced: true }, "", n2.data.viewUrl), window.dispatchEvent(new PopStateEvent("popstate", { state: "luiginavigation" })), window.location.hash !== i3 && window.dispatchEvent(new HashChangeEvent("hashchange"));
                }
                e3.currentContext.withoutSync && Object.assign(e3.currentContext.context, { viewUrl: n2.data.viewUrl ? n2.data.viewUrl : void 0, pathParams: n2.data.pathParams ? n2.data.pathParams : void 0 }), e3._notifyUpdate(), f.sendPostMessageToLuigiCore({ msg: "luigi.navigate.ok" });
              }), window.parent.postMessage({ msg: "luigi.get-context", clientVersion: n(9).version }, "*"), this._tpcCheck();
            }
          } }, { key: "_tpcCheck", value: function() {
            var e3, t3, n2 = "enabled", i2 = document.cookie;
            i2 && (e3 = i2.split(";").map(function(e4) {
              return e4.trim();
            }).find(function(e4) {
              return "luigiCookie=true" == e4;
            })), "luigiCookie=true" === e3 && (t3 = e3.split("=")[0], document.cookie = t3 + "=; Max-Age=-99999999;"), document.cookie = "luigiCookie=true; SameSite=None; Secure", (i2 = document.cookie) && (e3 = i2.split(";").map(function(e4) {
              return e4.trim();
            }).find(function(e4) {
              return "luigiCookie=true" == e4;
            })), "luigiCookie=true" === e3 ? (window.parent.postMessage({ msg: "luigi.third-party-cookie", tpc: n2 }, "*"), document.cookie = t3 + "=; Max-Age=-99999999;") : (n2 = "disabled", window.parent.postMessage({ msg: "luigi.third-party-cookie", tpc: n2 }, "*"), console.warn("Third party cookies are not supported!"));
          } }, { key: "_callAllFns", value: function(e3, t3, n2) {
            for (var i2 in e3)
              e3.hasOwnProperty(i2) && f.isFunction(e3[i2]) && e3[i2](t3, n2);
          } }, { key: "_notifyInit", value: function(e3) {
            this._callAllFns(this._onInitFns, this.currentContext.context, e3);
          } }, { key: "_notifyUpdate", value: function() {
            this._callAllFns(this._onContextUpdatedFns, this.currentContext.context);
          } }, { key: "_notifyInactive", value: function() {
            this._callAllFns(this._onInactiveFns);
          } }, { key: "setCurrentContext", value: function(e3) {
            this.currentContext = e3;
          } }, { key: "addInitListener", value: function(e3) {
            var t3 = f.getRandomId();
            return this._onInitFns[t3] = e3, this.luigiInitialized && f.isFunction(e3) && e3(this.currentContext.context, f.getLuigiCoreDomain()), t3;
          } }, { key: "removeInitListener", value: function(e3) {
            return !!this._onInitFns[e3] && (this._onInitFns[e3] = void 0, true);
          } }, { key: "addContextUpdateListener", value: function(e3) {
            var t3 = f.getRandomId();
            return this._onContextUpdatedFns[t3] = e3, this.luigiInitialized && f.isFunction(e3) && e3(this.currentContext.context), t3;
          } }, { key: "removeContextUpdateListener", value: function(e3) {
            return !!this._onContextUpdatedFns[e3] && (this._onContextUpdatedFns[e3] = void 0, true);
          } }, { key: "addInactiveListener", value: function(e3) {
            var t3 = f.getRandomId();
            return this._onInactiveFns[t3] = e3, t3;
          } }, { key: "removeInactiveListener", value: function(e3) {
            return !!this._onInactiveFns[e3] && (this._onInactiveFns[e3] = void 0, true);
          } }, { key: "addCustomMessageListener", value: function(e3, t3) {
            return f.addEventListener(e3, function(e4, n2) {
              return t3(e4, n2);
            });
          } }, { key: "removeCustomMessageListener", value: function(e3) {
            return f.removeEventListener(e3);
          } }, { key: "getToken", value: function() {
            return this.authData.accessToken;
          } }, { key: "getContext", value: function() {
            return this.getEventData();
          } }, { key: "getEventData", value: function() {
            return this.currentContext.context;
          } }, { key: "getActiveFeatureToggles", value: function() {
            return this.currentContext.internal.activeFeatureToggleList;
          } }, { key: "addNodeParams", value: function(e3) {
            var t3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
            e3 && f.sendPostMessageToLuigiCore({ msg: "luigi.addNodeParams", data: e3, keepBrowserHistory: t3 });
          } }, { key: "getNodeParams", value: function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            return e3 ? f.deSanitizeParamsMap(this.currentContext.nodeParams) : this.currentContext.nodeParams;
          } }, { key: "getPathParams", value: function() {
            return this.currentContext.pathParams;
          } }, { key: "getCoreSearchParams", value: function() {
            return this.currentContext.searchParams || {};
          } }, { key: "addCoreSearchParams", value: function(e3) {
            var t3 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
            e3 && f.sendPostMessageToLuigiCore({ msg: "luigi.addSearchParams", data: e3, keepBrowserHistory: t3 });
          } }, { key: "getClientPermissions", value: function() {
            return this.currentContext.internal.clientPermissions || {};
          } }, { key: "setTargetOrigin", value: function(e3) {
            f.setTargetOrigin(e3);
          } }, { key: "sendCustomMessage", value: function(e3) {
            var t3 = f.convertCustomMessageUserToInternal(e3);
            f.sendPostMessageToLuigiCore(t3);
          } }, { key: "getUserSettings", value: function() {
            return this.currentContext.internal.userSettings;
          } }, { key: "getAnchor", value: function() {
            return this.currentContext.internal.anchor || "";
          } }, { key: "setAnchor", value: function(e3) {
            f.sendPostMessageToLuigiCore({ msg: "luigi.setAnchor", anchor: e3 });
          } }]), t2;
        }(g))(), p = n(6), m = n.n(p), y = n(5), k = n.n(y), C = function(e2) {
          function t2(e3) {
            var n2;
            r()(this, t2), (n2 = u()(this, c()(t2).call(this))).validSplitViewEvents = ["expand", "collapse", "resize", "close"], n2.splitView = { exists: true, size: 40, collapsed: false }, Object.assign(n2.splitView, e3);
            return n2.splitView.listeners = [f.addEventListener("luigi.navigation.splitview.internal", function(e4) {
              Object.assign(n2.splitView, e4.data.data);
            })], n2.on("resize", function(e4) {
              n2.splitView.size = e4;
            }), n2.on("close", function() {
              n2.splitView.listeners.forEach(function(e4) {
                return f.removeEventListener(e4);
              });
            }), n2;
          }
          return v()(t2, e2), a()(t2, [{ key: "sendSplitViewEvent", value: function(e3, t3) {
            f.sendPostMessageToLuigiCore({ msg: "luigi.navigation.splitview.".concat(e3), data: t3 });
          } }, { key: "collapse", value: function() {
            this.sendSplitViewEvent("collapse");
          } }, { key: "expand", value: function() {
            this.sendSplitViewEvent("expand");
          } }, { key: "close", value: function() {
            this.sendSplitViewEvent("close");
          } }, { key: "setSize", value: function(e3) {
            this.sendSplitViewEvent("resize", e3);
          } }, { key: "on", value: function(e3, t3) {
            if (!this.validSplitViewEvents.includes(e3))
              return console.warn(e3 + " is not a valid split view event"), false;
            var n2 = f.addEventListener("luigi.navigation.splitview.".concat(e3, ".ok"), function(e4) {
              var n3 = "number" == typeof e4.data.data ? e4.data.data : void 0;
              t3(n3);
            });
            return this.splitView.listeners.push(n2), n2;
          } }, { key: "removeEventListener", value: function(e3) {
            return f.removeEventListener(e3);
          } }, { key: "exists", value: function() {
            return this.splitView.exists;
          } }, { key: "getSize", value: function() {
            return this.splitView.size;
          } }, { key: "isCollapsed", value: function() {
            return this.splitView.collapsed;
          } }, { key: "isExpanded", value: function() {
            return !this.splitView.collapsed;
          } }]), t2;
        }(g), w = function(e2) {
          function t2(e3) {
            var n2;
            return r()(this, t2), n2 = u()(this, c()(t2).call(this)), Object.assign(k()(n2), e3), n2.options = { preserveView: false, nodeParams: {}, errorSkipNavigation: false, fromContext: null, fromClosestContext: false, fromVirtualTreeRoot: false, fromParent: false, relative: false, link: "", newTab: false, preserveQueryParams: false, anchor: "", preventContextUpdate: false, preventHistoryEntry: false }, n2;
          }
          return v()(t2, e2), a()(t2, [{ key: "navigate", value: function(e3, t3, n2, i2, r2, o2) {
            if (this.options.errorSkipNavigation)
              this.options.errorSkipNavigation = false;
            else {
              i2 && r2 && o2 && console.warn("modalSettings, splitViewSettings and drawerSettings cannot be used together. Only modal setting will be taken into account."), this.options.preserveView = n2;
              var a2 = "/" !== e3[0];
              if ("/" === e3 && (i2 || r2 || o2))
                console.warn("Navigation with an absolute path prevented.");
              else {
                var s2 = { msg: "luigi.navigation.open", sessionId: t3, params: Object.assign(this.options, { link: e3, relative: a2, intent: f.hasIntent(e3), modal: i2, splitView: r2, drawer: o2 }) };
                f.sendPostMessageToLuigiCore(s2);
              }
            }
          } }, { key: "updateModalPathInternalNavigation", value: function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (e3) {
              var i2 = { msg: "luigi.navigation.updateModalDataPath", params: Object.assign(this.options, { link: e3, modal: t3, history: n2 }) };
              f.sendPostMessageToLuigiCore(i2);
            } else
              console.warn("Updating path of the modal upon internal navigation prevented. No path specified.");
          } }, { key: "navigateToIntent", value: function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, n2 = "#?intent=";
            if (n2 += e3, t3) {
              var i2 = Object.entries(t3);
              if (i2.length > 0) {
                n2 += "?";
                for (var r2 = 0, o2 = i2; r2 < o2.length; r2++) {
                  var a2 = m()(o2[r2], 2), s2 = a2[0], u2 = a2[1];
                  n2 += s2 + "=" + u2 + "&";
                }
                n2 = n2.slice(0, -1);
              }
            }
            this.navigate(n2);
          } }, { key: "openAsModal", value: function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            this.navigate(e3, 0, true, t3);
          } }, { key: "updateModalSettings", value: function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t3 = { msg: "luigi.navigation.updateModalSettings", updatedModalSettings: e3 };
            f.sendPostMessageToLuigiCore(t3);
          } }, { key: "openAsSplitView", value: function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            return this.navigate(e3, 0, true, void 0, t3), new C(t3);
          } }, { key: "openAsDrawer", value: function(e3) {
            var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            this.navigate(e3, 0, true, void 0, void 0, t3);
          } }, { key: "fromContext", value: function(e3) {
            return this.currentContext.context.parentNavigationContexts && -1 !== this.currentContext.context.parentNavigationContexts.indexOf(e3) ? this.options.fromContext = e3 : (this.options.errorSkipNavigation = true, console.error("Navigation not possible, navigationContext " + e3 + " not found.")), this;
          } }, { key: "fromClosestContext", value: function() {
            return this.currentContext && this.currentContext.context.parentNavigationContexts.length > 0 ? (this.options.fromContext = null, this.options.fromClosestContext = true) : console.error("Navigation not possible, no parent navigationContext found."), this;
          } }, { key: "fromVirtualTreeRoot", value: function() {
            return this.options.fromContext = null, this.options.fromClosestContext = false, this.options.fromVirtualTreeRoot = true, this;
          } }, { key: "fromParent", value: function() {
            return this.options.fromParent = true, this;
          } }, { key: "withParams", value: function(e3) {
            return e3 && Object.assign(this.options.nodeParams, e3), this;
          } }, { key: "withOptions", value: function(e3) {
            return f.isObject(e3) ? (void 0 !== e3.preventHistoryEntry && (this.options.preventHistoryEntry = e3.preventHistoryEntry), void 0 !== e3.preventContextUpdate && (this.options.preventContextUpdate = e3.preventContextUpdate), this) : this;
          } }, { key: "pathExists", value: function(e3) {
            var t3 = f.getRandomId(), n2 = this.getPromise("pathExistsPromises") || {};
            n2[t3] = { resolveFn: function() {
            }, then: function(e4) {
              this.resolveFn = e4;
            } }, this.setPromise("pathExistsPromises", n2), f.addEventListener("luigi.navigation.pathExists.answer", function(e4, n3) {
              var i3 = e4.data.data, r2 = this.getPromise("pathExistsPromises") || {};
              i3.correlationId === t3 && (r2[i3.correlationId] && (r2[i3.correlationId].resolveFn(i3.pathExists), delete r2[i3.correlationId], this.setPromise("pathExistsPromises", r2)), f.removeEventListener(n3));
            }.bind(this));
            var i2 = { msg: "luigi.navigation.pathExists", data: Object.assign(this.options, { id: t3, link: e3, intent: f.hasIntent(e3), relative: "/" !== e3[0] }) };
            return f.sendPostMessageToLuigiCore(i2), n2[t3];
          } }, { key: "hasBack", value: function() {
            return !!this.currentContext.internal.modal || 0 !== this.currentContext.internal.viewStackSize;
          } }, { key: "goBack", value: function(e3) {
            f.sendPostMessageToLuigiCore({ msg: "luigi.navigation.back", goBackContext: e3 && JSON.stringify(e3) });
          } }, { key: "withoutSync", value: function() {
            return this.options.withoutSync = true, this;
          } }, { key: "newTab", value: function() {
            return this.options.newTab = true, this;
          } }, { key: "preserveQueryParams", value: function() {
            var e3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            return this.options.preserveQueryParams = e3, this;
          } }, { key: "getCurrentRoute", value: function() {
            var e3 = this, t3 = f.getRandomId(), n2 = this.getPromise("getCurrentRoute") || {};
            return n2[t3] = { resolveFn: function() {
            }, then: function(e4) {
              this.resolveFn = e4;
            } }, this.setPromise("getCurrentRoute", n2), f.addEventListener("luigi.navigation.currentRoute.answer", function(n3, i2) {
              var r2 = n3.data.data, o2 = e3.getPromise("getCurrentRoute") || {};
              r2.correlationId === t3 && (o2[r2.correlationId] && (o2[r2.correlationId].resolveFn(r2.route), delete o2[r2.correlationId], e3.setPromise("getCurrentRoute", o2)), f.removeEventListener(i2)), f.removeEventListener(i2);
            }), f.sendPostMessageToLuigiCore({ msg: "luigi.navigation.currentRoute", data: Object.assign(this.options, { id: t3 }) }), n2[t3];
          } }]), t2;
        }(g), x = new (function(e2) {
          function t2() {
            var e3;
            return r()(this, t2), e3 = u()(this, c()(t2).call(this)), f.addEventListener("luigi.current-locale-changed", function(e4) {
              var t3;
              e4.data.currentLocale && (null === (t3 = h.currentContext) || void 0 === t3 ? void 0 : t3.internal) && (h.currentContext.internal.currentLocale = e4.data.currentLocale, h._notifyUpdate());
            }), e3;
          }
          return v()(t2, e2), a()(t2, [{ key: "showLoadingIndicator", value: function() {
            f.sendPostMessageToLuigiCore({ msg: "luigi.show-loading-indicator" });
          } }, { key: "hideLoadingIndicator", value: function() {
            f.sendPostMessageToLuigiCore({ msg: "luigi.hide-loading-indicator" });
          } }, { key: "closeCurrentModal", value: function() {
            f.sendPostMessageToLuigiCore({ msg: "luigi.close-modal" });
          } }, { key: "addBackdrop", value: function() {
            f.sendPostMessageToLuigiCore({ msg: "luigi.add-backdrop" });
          } }, { key: "removeBackdrop", value: function() {
            f.sendPostMessageToLuigiCore({ msg: "luigi.remove-backdrop" });
          } }, { key: "setDirtyStatus", value: function(e3) {
            f.sendPostMessageToLuigiCore({ msg: "luigi.set-page-dirty", dirty: e3 });
          } }, { key: "showConfirmationModal", value: function(e3) {
            var t3 = this;
            f.addEventListener("luigi.ux.confirmationModal.hide", function(e4, n3) {
              t3.hideConfirmationModal(e4.data.data), f.removeEventListener(n3);
            }), f.sendPostMessageToLuigiCore({ msg: "luigi.ux.confirmationModal.show", data: { settings: e3 } });
            var n2 = {};
            return n2.promise = new Promise(function(e4, t4) {
              n2.resolveFn = e4, n2.rejectFn = t4;
            }), this.setPromise("confirmationModal", n2), n2.promise;
          } }, { key: "hideConfirmationModal", value: function(e3) {
            var t3 = this.getPromise("confirmationModal");
            t3 && (e3.confirmed ? t3.resolveFn() : t3.rejectFn(), this.setPromise("confirmationModal", void 0));
          } }, { key: "showAlert", value: function(e3) {
            var t3 = this;
            f.addEventListener("luigi.ux.alert.hide", function(e4, n3) {
              t3.hideAlert(e4.data), f.removeEventListener(n3);
            }), e3.id = f.getRandomId(), (null == e3 ? void 0 : e3.closeAfter) < 100 && (console.warn("Message with id='".concat(e3.id, "' has too small 'closeAfter' value. It needs to be at least 100ms.")), e3.closeAfter = void 0), f.sendPostMessageToLuigiCore({ msg: "luigi.ux.alert.show", data: { settings: e3 } });
            var n2 = this.getPromise("alerts") || {};
            return n2[e3.id] = {}, n2[e3.id].promise = new Promise(function(t4) {
              n2[e3.id].resolveFn = t4;
            }), this.setPromise("alerts", n2), n2[e3.id].promise;
          } }, { key: "hideAlert", value: function(e3) {
            var t3 = e3.id, n2 = e3.dismissKey, i2 = this.getPromise("alerts");
            t3 && i2[t3] && (i2[t3].resolveFn(n2 || t3), delete i2[t3], this.setPromise("alerts", i2));
          } }, { key: "getCurrentLocale", value: function() {
            var e3, t3;
            return null === (e3 = h.currentContext) || void 0 === e3 || null === (t3 = e3.internal) || void 0 === t3 ? void 0 : t3.currentLocale;
          } }, { key: "setCurrentLocale", value: function(e3) {
            e3 && f.sendPostMessageToLuigiCore({ msg: "luigi.ux.set-current-locale", data: { currentLocale: e3 } });
          } }, { key: "isSplitView", value: function() {
            var e3, t3;
            return null === (e3 = h.currentContext) || void 0 === e3 || null === (t3 = e3.internal) || void 0 === t3 ? void 0 : t3.splitView;
          } }, { key: "isModal", value: function() {
            var e3, t3;
            return null === (e3 = h.currentContext) || void 0 === e3 || null === (t3 = e3.internal) || void 0 === t3 ? void 0 : t3.modal;
          } }, { key: "isDrawer", value: function() {
            var e3, t3;
            return null === (e3 = h.currentContext) || void 0 === e3 || null === (t3 = e3.internal) || void 0 === t3 ? void 0 : t3.drawer;
          } }, { key: "getCurrentTheme", value: function() {
            var e3, t3;
            return null === (e3 = h.currentContext) || void 0 === e3 || null === (t3 = e3.internal) || void 0 === t3 ? void 0 : t3.currentTheme;
          } }]), t2;
        }(g))(), P = /* @__PURE__ */ new Map(), L = function(e2) {
          function t2() {
            var e3;
            return r()(this, t2), (e3 = u()(this, c()(t2).call(this))).storageEventProcessor = new b(), f.addEventListener("storage", function(t3, n2) {
              return e3.storageEventProcessor.processEvent(t3, n2);
            }), e3;
          }
          return v()(t2, e2), a()(t2, [{ key: "setItem", value: function(e3, t3) {
            var n2 = this;
            return new Promise(function(i2, r2) {
              n2.storageEventProcessor.execute(i2, r2, "setItem", { key: e3, value: t3 });
            });
          } }, { key: "getItem", value: function(e3) {
            var t3 = this;
            return new Promise(function(n2, i2) {
              t3.storageEventProcessor.execute(n2, i2, "getItem", { key: e3 });
            });
          } }, { key: "removeItem", value: function(e3) {
            var t3 = this;
            return new Promise(function(n2, i2) {
              t3.storageEventProcessor.execute(n2, i2, "removeItem", { key: e3 });
            });
          } }, { key: "clear", value: function() {
            var e3 = this;
            return new Promise(function(t3, n2) {
              e3.storageEventProcessor.execute(t3, n2, "clear", {});
            });
          } }, { key: "has", value: function(e3) {
            var t3 = this;
            return new Promise(function(n2, i2) {
              t3.storageEventProcessor.execute(n2, i2, "has", { key: e3 });
            });
          } }, { key: "getAllKeys", value: function() {
            var e3 = this;
            return new Promise(function(t3, n2) {
              e3.storageEventProcessor.execute(t3, n2, "getAllKeys", {});
            });
          } }]), t2;
        }(g), b = function() {
          function e2() {
            r()(this, e2);
          }
          return a()(e2, [{ key: "processEvent", value: function(e3, t2) {
            try {
              var n2 = e3.data.data;
              if (!P.has(n2.id))
                return void console.log("Impossible to find Promise method for message " + n2.id);
              var i2 = P.get(n2.id);
              "ERROR" === n2.status ? i2.reject(n2.result) : i2.resolve(n2.result), P.delete(n2.id);
            } catch (e4) {
              console.error(e4);
            }
          } }, { key: "waitForSyncResult", value: function(e3) {
            for (var t2 = new Date().getTime(); !syncOperation.has(e3); ) {
              if (new Date().getTime() - t2 > 1e4)
                throw "Storage operation is taking more than 1 second...Some problem with Luigi Core communication";
            }
            var n2 = syncOperation.get(e3);
            return P.delete(e3), n2;
          } }, { key: "execute", value: function(e3, t2, n2, i2) {
            var r2 = f.getRandomId();
            this.createPendingOperation(r2, e3, t2), this.sendMessage(r2, n2, i2);
          } }, { key: "createPendingOperation", value: function(e3, t2, n2) {
            P.set(e3, { resolve: t2, reject: n2 });
          } }, { key: "sendMessage", value: function(e3, t2, n2) {
            f.sendPostMessageToLuigiCore({ msg: "storage", data: { id: e3, operation: t2, params: n2 } });
          } }]), e2;
        }(), I = new L(), M = function() {
          function e2() {
            r()(this, e2), window !== window.top && ("true" !== window.document.head.getAttribute("disable-luigi-history-handling") && (history.pushState = history.replaceState.bind(history)), "true" !== window.document.head.getAttribute("disable-luigi-runtime-error-handling") && window.addEventListener("error", function(e3) {
              var t2 = { msg: "luigi-runtime-error-handling", errorObj: { filename: e3.filename, message: e3.message, lineno: e3.lineno, colno: e3.colno, error: e3.error } };
              f.sendPostMessageToLuigiCore(t2);
            }));
          }
          return a()(e2, [{ key: "addInitListener", value: function(e3) {
            return h.addInitListener(e3);
          } }, { key: "removeInitListener", value: function(e3) {
            return h.removeInitListener(e3);
          } }, { key: "addContextUpdateListener", value: function(e3) {
            return h.addContextUpdateListener(e3);
          } }, { key: "removeContextUpdateListener", value: function(e3) {
            return h.removeContextUpdateListener(e3);
          } }, { key: "getToken", value: function() {
            return h.getToken();
          } }, { key: "getEventData", value: function() {
            return h.getEventData();
          } }, { key: "getContext", value: function() {
            return h.getContext();
          } }, { key: "addNodeParams", value: function(e3, t2) {
            return h.addNodeParams(e3, t2);
          } }, { key: "getNodeParams", value: function(e3) {
            return h.getNodeParams(e3);
          } }, { key: "getActiveFeatureToggles", value: function() {
            return h.getActiveFeatureToggles();
          } }, { key: "getPathParams", value: function() {
            return h.getPathParams();
          } }, { key: "getCoreSearchParams", value: function() {
            return h.getCoreSearchParams();
          } }, { key: "addCoreSearchParams", value: function(e3, t2) {
            return h.addCoreSearchParams(e3, t2);
          } }, { key: "getClientPermissions", value: function() {
            return h.getClientPermissions();
          } }, { key: "sendCustomMessage", value: function(e3) {
            return h.sendCustomMessage(e3);
          } }, { key: "addCustomMessageListener", value: function(e3, t2) {
            return h.addCustomMessageListener(e3, t2);
          } }, { key: "removeCustomMessageListener", value: function(e3) {
            return h.removeCustomMessageListener(e3);
          } }, { key: "addInactiveListener", value: function(e3, t2) {
            return h.addInactiveListener(e3, t2);
          } }, { key: "removeInactiveListener", value: function(e3) {
            return h.removeInactiveListener(e3);
          } }, { key: "setTargetOrigin", value: function(e3) {
            return h.setTargetOrigin(e3);
          } }, { key: "getUserSettings", value: function() {
            return h.getUserSettings();
          } }, { key: "isLuigiClientInitialized", value: function() {
            return h.isLuigiClientInitialized();
          } }, { key: "luigiClientInit", value: function() {
            return h.luigiClientInit();
          } }, { key: "getAnchor", value: function() {
            return h.getAnchor();
          } }, { key: "setAnchor", value: function(e3) {
            return h.setAnchor(e3);
          } }, { key: "linkManager", value: function() {
            return new w({ currentContext: h.currentContext });
          } }, { key: "uxManager", value: function() {
            return x;
          } }, { key: "lifecycleManager", value: function() {
            return h;
          } }, { key: "storageManager", value: function() {
            return I;
          } }]), e2;
        }();
        t.default = M = new M();
      }]).default;
    });
  }
});
export default require_luigi_client();
//# sourceMappingURL=@luigi-project_client.js.map
